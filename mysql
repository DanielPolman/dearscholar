# Copyright (c) 2020 P.M. Kruyen, Institute for Management Research, Radboud University, the Netherlands. 

# MYSQL database initialization for DearScholar. Consult the installation instructions in the README file for details. In particular, the information about when Part 1 and Part 2 should be run during installation.

# Note: In the deployed version of DearScholar, both tables 1 and 2 are in a different database (called respondents) than the other tables (in 'project' databases) to make it possible to run multiple projects simultaneously using one production environment.

#---
# Part 1
#---

# MYSQL database setup

CREATE DATABASE IF NOT EXISTS project
	 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;

# MYSQL table setup (respondent management)

USE project;

CREATE TABLE IF NOT EXISTS authentication (
	id int NOT NULL AUTO_INCREMENT PRIMARY KEY, 
   	uname VARCHAR(100) ,
   	pwd TEXT,
	project TEXT,
	setup VARCHAR(1) ,
	q0_startdate TEXT,
	q0_occasions TEXT,
	q0_intervaltype TEXT,
	q0_interval TEXT);

CREATE TABLE IF NOT EXISTS registration (
	id int NOT NULL AUTO_INCREMENT PRIMARY KEY, 
	project TEXT,   	
	uname VARCHAR(100),
	token TEXT);
	
CREATE TABLE IF NOT EXISTS pintable (
	id int NOT NULL AUTO_INCREMENT PRIMARY KEY, 
   	uname VARCHAR(100),
   	pin TEXT,
	code TEXT);

# MYSQL table setup (survey setup)

CREATE TABLE IF NOT EXISTS surveyStructure (
	consent TEXT,
	manual TEXT);

CREATE TABLE IF NOT EXISTS moduleStructure (
	id int NOT NULL AUTO_INCREMENT PRIMARY KEY, 
	module0 VARCHAR(100),
	name VARCHAR(100),
	page VARCHAR(1),
	mandatory VARCHAR(1),
	image TEXT,
	imageleft VARCHAR(5),
	imagetop VARCHAR(5));

CREATE TABLE IF NOT EXISTS pageStructure (
	id int NOT NULL AUTO_INCREMENT PRIMARY KEY, 
	module1 VARCHAR(100),
	classp VARCHAR(100),
	idp VARCHAR(100),
	header VARCHAR(100),
	backbuttonid VARCHAR(100),
	backbuttontext VARCHAR(100),
	backbuttonclick VARCHAR(100),
	backbuttonhref VARCHAR(100),
	nextbuttonid VARCHAR(100),
	nextbuttontext VARCHAR(100),
	nextbuttonclick VARCHAR(100),
	nextbuttonhref VARCHAR(100));

CREATE TABLE IF NOT EXISTS questionTable (
	id int NOT NULL AUTO_INCREMENT PRIMARY KEY, 
	module2 VARCHAR(100),
	tab VARCHAR(100),
	idq VARCHAR(100),
	type VARCHAR(100),
	question TEXT,
	categories TEXT,
	footer TEXT);

# MYSQL table setup (in app messages)

CREATE TABLE IF NOT EXISTS messages (
	id int NOT NULL AUTO_INCREMENT PRIMARY KEY, 
   	uname VARCHAR(100),
   	timestamp TEXT,
   	message TEXT,
	seen VARCHAR(1));

#---
# Part 2
#---
	
# MYSQL table setup (response tables)
# Warning: Set up these tables only after the questionTable has been populated. # Warning: See samplestudy-part2.sql for a mock survey.
# Warning: When new questions are added to the questionTable afterwards (or question IDs have changed), add new response columns for these questions manually to the table. 

# Note: In the source code, we have 7 modules (A, B, C, D, E, F, G) and, hence 7 responseTables. 

# Code adapted from https://stackoverflow.com/users/833073/fthiella
# https://stackoverflow.com/questions/15820082/create-a-table-with-column-names-derived-from-row-values-of-another-table

CREATE TABLE IF NOT EXISTS responseTableModuleA (
	id int NOT NULL AUTO_INCREMENT PRIMARY KEY, 
   	uname VARCHAR(100) ,
   	timestamp TEXT,
   	surveydate TEXT);

SELECT
  CONCAT(
    'ALTER TABLE responseTableModuleA ADD COLUMN (', 
    GROUP_CONCAT(DISTINCT
      CONCAT(idq, ' TEXT')
      SEPARATOR ','),
    ');')
FROM
  questionTable WHERE module2 = 'A'
INTO @sql;

PREPARE stmt FROM @sql;
EXECUTE stmt;

CREATE TABLE IF NOT EXISTS responseTableModuleB (
	id int NOT NULL AUTO_INCREMENT PRIMARY KEY, 
   	uname VARCHAR(100) ,
   	timestamp TEXT,
   	surveydate TEXT);

SELECT
  CONCAT(
    'ALTER TABLE responseTableModuleB ADD COLUMN (', 
    GROUP_CONCAT(DISTINCT
      CONCAT(idq, ' TEXT')
      SEPARATOR ','),
    ');')
FROM
  questionTable WHERE module2 = 'B'
INTO @sql;

PREPARE stmt FROM @sql;
EXECUTE stmt;

CREATE TABLE IF NOT EXISTS responseTableModuleC (
	id int NOT NULL AUTO_INCREMENT PRIMARY KEY, 
   	uname VARCHAR(100) ,
   	timestamp TEXT,
   	surveydate TEXT);

SELECT
  CONCAT(
    'ALTER TABLE responseTableModuleC ADD COLUMN (', 
    GROUP_CONCAT(DISTINCT
      CONCAT(idq, ' TEXT')
      SEPARATOR ','),
    ');')
FROM
  questionTable WHERE module2 = 'C'
INTO @sql;

PREPARE stmt FROM @sql;
EXECUTE stmt;

CREATE TABLE IF NOT EXISTS responseTableModuleD (
	id int NOT NULL AUTO_INCREMENT PRIMARY KEY, 
   	uname VARCHAR(100) ,
   	timestamp TEXT,
   	surveydate TEXT);

SELECT
  CONCAT(
    'ALTER TABLE responseTableModuleD ADD COLUMN (', 
    GROUP_CONCAT(DISTINCT
      CONCAT(idq, ' TEXT')
      SEPARATOR ','),
    ');')
FROM
  questionTable WHERE module2 = 'D'
INTO @sql;

PREPARE stmt FROM @sql;
EXECUTE stmt;

CREATE TABLE IF NOT EXISTS responseTableModuleE (
	id int NOT NULL AUTO_INCREMENT PRIMARY KEY, 
   	uname VARCHAR(100) ,
   	timestamp TEXT,
   	surveydate TEXT);

SELECT
  CONCAT(
    'ALTER TABLE responseTableModuleE ADD COLUMN (', 
    GROUP_CONCAT(DISTINCT
      CONCAT(idq, ' TEXT')
      SEPARATOR ','),
    ');')
FROM
  questionTable WHERE module2 = 'E'
INTO @sql;

PREPARE stmt FROM @sql;
EXECUTE stmt;

CREATE TABLE IF NOT EXISTS responseTableModuleF (
	id int NOT NULL AUTO_INCREMENT PRIMARY KEY, 
   	uname VARCHAR(100) ,
   	timestamp TEXT,
   	surveydate TEXT);

SELECT
  CONCAT(
    'ALTER TABLE responseTableModuleF ADD COLUMN (', 
    GROUP_CONCAT(DISTINCT
      CONCAT(idq, ' TEXT')
      SEPARATOR ','),
    ');')
FROM
  questionTable WHERE module2 = 'F'
INTO @sql;

PREPARE stmt FROM @sql;
EXECUTE stmt;

CREATE TABLE IF NOT EXISTS responseTableModuleG (
	id int NOT NULL AUTO_INCREMENT PRIMARY KEY, 
   	uname VARCHAR(100) ,
   	timestamp TEXT,
   	surveydate TEXT);

SELECT
  CONCAT(
    'ALTER TABLE responseTableModuleG ADD COLUMN (', 
    GROUP_CONCAT(DISTINCT
      CONCAT(idq, ' TEXT')
      SEPARATOR ','),
    ');')
FROM
  questionTable WHERE module2 = 'G'
INTO @sql;

PREPARE stmt FROM @sql;
EXECUTE stmt;

# MYSQL user management

##  INDIVIDUAL RESEARCHER
CREATE USER ‘######’@‘localhost' IDENTIFIED BY '######';

	### TO MANIPULATE THE REGISTRATION OF RESPONDENTS
	GRANT INSERT, SELECT, UPDATE ON project. authentication TO '######'@'localhost';

	### TO MANIPULATE  THE SURVEY SETUP
	GRANT INSERT, SELECT, DELETE, UPDATE ON project. surveyStructure TO '######'@'localhost';
	GRANT INSERT, SELECT, DELETE, UPDATE ON project. moduleStructure TO '######'@'localhost';
	GRANT INSERT, SELECT, DELETE, UPDATE ON project. pageStructure TO '######'@'localhost';
	GRANT INSERT, SELECT, DELETE, UPDATE ON project. questionTable TO '######'@'localhost';

	### TO MANIPULATE THE MESSAGES TABLE
	GRANT INSERT, SELECT, DELETE, UPDATE ON project. messages TO '######'@'localhost';

	### TO VIEW THE RESULTS OF THE SURVEY
	GRANT SELECT ON project. responseTableModuleA TO '######'@'localhost';
	GRANT SELECT ON project. responseTableModuleB TO '######'@'localhost';
	GRANT SELECT ON project. responseTableModuleC TO '######'@'localhost';
	GRANT SELECT ON project. responseTableModuleD TO '######'@'localhost';
	GRANT SELECT ON project. responseTableModuleE TO '######'@'localhost';
	GRANT SELECT ON project. responseTableModuleF TO '######'@'localhost';
	GRANT SELECT ON project. responseTableModuleG TO '######'@'localhost';

## RESPONDENT AKA ENDUSER IN DEARSCHOLAR (THAT IS, THE APP)
CREATE USER ‘######’@‘localhost' IDENTIFIED BY '######';
	
	### TO VERIFY THE CREDENTIALS AND SET THE SETUP VALUE TO ONE (1)
	GRANT SELECT, UPDATE ON project. authentication TO '######'@'localhost';

	### TO REGISTER THE DEVICE FOR RECEIVING PUSH NOTIFICATIONS (AND UPDATE WHEN APPLE OR ANDROID PROVIDES A NEW TOKEN
	GRANT SELECT, UPDATE ON project. registration TO '######'@'localhost';
	
	# TO MANIPULATE THE PIN CODE
	GRANT INSERT, SELECT, UPDATE ON project. pintable TO '######'@'localhost';
	
	# READ THE SURVEY SETUP
	GRANT SELECT ON project. surveyStructure TO '######'@'localhost';
	GRANT SELECT ON project. moduleStructure TO '######'@'localhost';
	GRANT SELECT ON project. pageStructure TO '######'@'localhost';
	GRANT SELECT ON project. questionTable TO '######'@'localhost';
	
	# READ MESSAGES AND SET THE READ VALUE TO ONE (1)
	GRANT SELECT, UPDATE ON project. questionTable TO '######'@'localhost';

	# INSERT (POST) THE DATA (SURVEY RESULTS
	GRANT INSERT ON project. responseTableModuleA TO '######'@'localhost';
	GRANT INSERT ON project. responseTableModuleB TO '######'@'localhost’;
	GRANT INSERT ON project. responseTableModuleC TO '######'@'localhost';
	GRANT INSERT ON project. responseTableModuleD TO '######'@'localhost';
	GRANT INSERT ON project. responseTableModuleE TO '######'@'localhost';
	GRANT INSERT ON project. responseTableModuleF TO '######'@'localhost';
	GRANT INSERT ON project. responseTableModuleG TO '######'@'localhost';


